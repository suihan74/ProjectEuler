/**
 * Problem 28 「螺旋状に並んだ数の対角線」
 * 1から初めて右方向に進み時計回りに数字を増やしていき, 5×5の螺旋が以下のように生成される:
 *
 * 21  22  23  24  25
 * 20   7   8   9  10
 * 19   6   1   2  11
 * 18   5   4   3  12
 * 17  16  15  14  13
 * 両対角線上の数字の合計は101であることが確かめられる.
 *
 * 1001×1001の螺旋を同じ方法で生成したとき, 対角線上の数字の和はいくつか?
 */

#include <cstdint>
#include <iostream>

using uInt = std::uint_fast32_t;

inline
uInt sum_spiral_corners(uInt level)
{
  // 右上方向に注目すると，1,9,25,49,... と初項1,公差2の等差数列の2乗になる
  // 1x1になる部分だけ四隅が無いので，そこだけ特殊化する
  if (level == 0) { return 1; }
  // 1x1を考えないので，初項3,公差2の等差数列の2乗
  const uInt N = 2 * level + 1;
  // 他の三隅の値は，その階層がNxNとするとN-1ずつ引いていった値になる
  // -> N*N, N*N - (N - 1), N*N - 2 * (N - 1), N*N - 3 * (N - 1); これらの和を返す
  return 4 * N * N - 6 * (N - 1);
}

int main(void)
{
  uInt sum = 0;
  // 1001x1001の螺旋の対角線上にある数値の和は，1x1 ~ 1001x1001の各階層の四角の和をとればいい
  // いま，螺旋中央の1を階層0, 3~9を階層1, 13~25を階層2, ...という風に考える
  // 1001x1001になるとき，その階層は  3+2*(l-1) = 2*l+1 == 1001 -> l == 500
  for (uInt i = 0; i < 501; i++) {
    sum += sum_spiral_corners(i);
  }
  std::cout << "Euler028: " << sum << std::endl;
  return 0;
}
