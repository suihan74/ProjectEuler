/**
 * Problem 11 「格子内の最大の積」
 * 次の 20×20 の格子のうち, 斜めに並んだ4つの数字が赤くマークされている.
 * それらの数字の積は 26 × 63 × 78 × 14 = 1788696 となる.
 *
 * 上の 20×20 の格子のうち, 上下左右斜めのいずれかの方向で連続する4つの数字の積のうち最大のものはいくつか?
 */

#include <algorithm>
#include <cstdint>
#include <iostream>

using uInt = std::uint_fast32_t;

constexpr uInt ROW = 20;
constexpr uInt COL = 20;
constexpr uInt SEQ = 4;
constexpr uInt src[] =
{
8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8,
49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0,
81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65,
52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91,
22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80,
24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50,
32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70,
67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21,
24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72,
21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95,
78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92,
16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57,
86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58,
19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40,
4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66,
88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69,
4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36,
20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16,
20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54,
1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48
};

/**
 * 指定点の右・右下・下・左下方向の積の最大値を返す<br>
 * 左・上・上斜め方向は他点と重複するため考慮しない
 * @param  pos 指定点（インデックス指定）
 * @return     その点で得られる最大値
 */
uInt sequence_multi(uInt pos)
{
  // 各方向について計算可能範囲内か確認
  const uInt col = pos % ROW;
  const bool left_limit = col > SEQ - 2;
  const bool right_limit = col < ROW - SEQ - 1;
  const bool bottom_limit = pos / COL < ROW - SEQ + 1;
  // それぞれの方向での積を入れる
  uInt b, r, lb, rb;
  b = r = lb = rb = 1;
  for (uInt i = 0; i < SEQ; i++) {  // 連続する個数を（無駄に）変えられるようにしたためこうなる
    // 左下
    if (left_limit && bottom_limit) {
      lb *= src[pos + i * COL - i];
    }
    // 右・右下
    if (right_limit) {
      r *= src[pos + i];
      if (bottom_limit) {
        rb *= src[pos + i * COL + i];
      }
    }
    // 下
    if (bottom_limit) {
      b *= src[pos + i * COL];
    }
  }

  return std::max({b, r, lb, rb});
}

int main(void)
{
  uInt max = 0;
  constexpr uInt last = ROW * COL - SEQ + 1;
  for (uInt i = 0; i < last; i++) {
    max = std::max(max, sequence_multi(i));
  }
  std::cout << "Euler011: " << max << std::endl;
  return 0;
}


/*
// 以下，二次元配列バージョン

#include <algorithm>
#include <cstdint>
#include <iostream>

using uInt = std::uint_fast32_t;

const uInt ROW = 20;
const uInt COL = 20;
const uInt SEQ = 4;
const uInt src[ROW][COL] =
{
{8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8},
{49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0},
{81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65},
{52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91},
{22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80},
{24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50},
{32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70},
{67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21},
{24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72},
{21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95},
{78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92},
{16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57},
{86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58},
{19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40},
{4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66},
{88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69},
{4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36},
{20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16},
{20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54},
{1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48}
};

uInt sequence_multi(uInt row, uInt col)
{
  // 各方向について計算可能範囲内か確認
  const bool left_limit = col > SEQ - 2;
  const bool right_limit = col < ROW - SEQ + 1;
  const bool bottom_limit = row < ROW - SEQ - 1;
  // それぞれの方向での積を入れる
  uInt b, r, lb, rb;
  b = r = lb = rb = 1;
  for (uInt i = 0; i < SEQ; i++) {
    // 左下
    if (left_limit && bottom_limit) {
      lb *= src[row + i][col - i];
    }
    // 右・右下
    if (right_limit) {
      r *= src[row][col + i];
      if (bottom_limit) {
        rb *= src[row + i][col + i];
      }
    }
    // 下
    if (bottom_limit) {
      b *= src[row + i][col];
    }
  }
  return std::max({b, r, lb, rb});
}

int main(void)
{
  uInt max = 0;
  for (uInt r = 0; r < ROW; r++) {
    for (uInt c = 0; c < COL; c++) {
      max = std::max(max, sequence_multi(r, c));
    }
  }
  std::cout << "Euler011: " << max << std::endl;
  return 0;
}
*/
